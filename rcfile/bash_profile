if [[ ! "$PATH" == */$HOME/.fzf/bin* ]]; then
  export PATH="${PATH:+${PATH}:}/$HOME/.fzf/bin"
fi

export HISTSIZE=10000000
export HISTFILESIZE=1000000
export SAVEHIST=10000000
[[ $- == *i* ]] && if [[ $- =~ i ]]; then

# To use custom commands instead of find, override _fzf_compgen_{path,dir}
if ! declare -f _fzf_compgen_path > /dev/null; then
  _fzf_compgen_path() {
    echo "$1"
    command find  -L "$1"  \
      -name .git -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) \
      -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
  }
fi

if ! declare -f _fzf_compgen_dir > /dev/null; then
  _fzf_compgen_dir() {
    command find -L "$1" -maxdepth 1\
      -path '*/\\.*' -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d \
      -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
  }
fi

###########################################################

# To redraw line after fzf closes (printf '\e[5n')
bind '"\e[0n": redraw-current-line' 2> /dev/null

__fzf_comprun() {
  if [[ "$(type -t _fzf_comprun 2>&1)" = function ]]; then
    _fzf_comprun "$@"
  elif [[ -n "$TMUX_PANE" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "$FZF_TMUX_OPTS" ]]; }; then
    shift
    fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- "$@"
  else
    shift
    fzf "$@"
  fi
}

__fzf_orig_completion() {
  local l comp f cmd
  while read -r l; do
    if [[ "$l" =~ ^(.*\ -F)\ *([^ ]*).*\ ([^ ]*)$ ]]; then
      comp="${BASH_REMATCH[1]}"
      f="${BASH_REMATCH[2]}"
      cmd="${BASH_REMATCH[3]}"
      [[ "$f" = _fzf_* ]] && continue
      printf -v "_fzf_orig_completion_${cmd//[^A-Za-z0-9_]/_}" "%s" "${comp} %s ${cmd} #${f}"
      if [[ "$l" = *" -o nospace "* ]] && [[ ! "$__fzf_nospace_commands" = *" $cmd "* ]]; then
        __fzf_nospace_commands="$__fzf_nospace_commands $cmd "
      fi
    fi
  done
}

_fzf_opts_completion() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="
    -x --extended
    -e --exact
    --algo
    -i +i
    -n --nth
    --with-nth
    -d --delimiter
    +s --no-sort
    --tac
    --tiebreak
    -m --multi
    --no-mouse
    --bind
    --cycle
    --no-hscroll
    --jump-labels
    --height
    --literal
    --reverse
    --margin
    --inline-info
    --prompt
    --pointer
    --marker
    --header
    --header-lines
    --ansi
    --tabstop
    --color
    --no-bold
    --history
    --history-size
    --preview
    --preview-window
    -q --query
    -1 --select-1
    -0 --exit-0
    -f --filter
    --print-query
    --expect
    --sync"

  case "${prev}" in
  --tiebreak)
    COMPREPLY=( $(compgen -W "length begin end index" -- "$cur") )
    return 0
    ;;
  --color)
    COMPREPLY=( $(compgen -W "dark light 16 bw" -- "$cur") )
    return 0
    ;;
  --history)
    COMPREPLY=()
    return 0
    ;;
  esac

  if [[ "$cur" =~ ^-|\+ ]]; then
    COMPREPLY=( $(compgen -W "${opts}" -- "$cur") )
    return 0
  fi

  return 0
}

_fzf_handle_dynamic_completion() {
  local cmd orig_var orig ret orig_cmd orig_complete
  cmd="$1"
  shift
  orig_cmd="$1"
  orig_var="_fzf_orig_completion_$cmd"
  orig="${!orig_var##*#}"
  if [[ -n "$orig" ]] && type "$orig" > /dev/null 2>&1; then
    $orig "$@"
  elif [[ -n "$_fzf_completion_loader" ]]; then
    orig_complete=$(complete -p "$orig_cmd" 2> /dev/null)
    _completion_loader "$@"
    ret=$?
    # _completion_loader may not have updated completion for the command
    if [[ "$(complete -p "$orig_cmd" 2> /dev/null)" != "$orig_complete" ]]; then
      __fzf_orig_completion < <(complete -p "$orig_cmd" 2> /dev/null)
      if [[ "$__fzf_nospace_commands" = *" $orig_cmd "* ]]; then
        eval "${orig_complete/ -F / -o nospace -F }"
      else
        eval "$orig_complete"
      fi
    fi
    return $ret
  fi
}

__fzf_generic_path_completion() {
  local cur base dir leftover matches trigger cmd
  cmd="${COMP_WORDS[0]//[^A-Za-z0-9_=]/_}"
  COMPREPLY=()
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  cur="${COMP_WORDS[COMP_CWORD]}"
  if [[ "$cur" == *"$trigger" ]]; then
    base=${cur:0:${#cur}-${#trigger}}
    eval "base=$base"

    [[ $base = *"/"* ]] && dir="$base"
    while true; do
      if [[ -z "$dir" ]] || [[ -d "$dir" ]]; then
        leftover=${base/#"$dir"}
        leftover=${leftover/#\/}
        [[ -z "$dir" ]] && dir='.'
        [[ "$dir" != "/" ]] && dir="${dir/%\//}"
        matches=$(eval "$1 $(printf %q "$dir")" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_COMPLETION_OPTS $2" __fzf_comprun "$4" -q "$leftover" | while read -r item; do
          printf "%q$3 " "$item"
        done)
        matches=${matches% }
        [[ -z "$3" ]] && [[ "$__fzf_nospace_commands" = *" ${COMP_WORDS[0]} "* ]] && matches="$matches "
        if [[ -n "$matches" ]]; then
          COMPREPLY=( "$matches" )
        else
          COMPREPLY=( "$cur" )
        fi
        printf '\e[5n'
        return 0
      fi
      dir=$(dirname "$dir")
      [[ "$dir" =~ /$ ]] || dir="$dir"/
    done
  else
    shift
    shift
    shift
    _fzf_handle_dynamic_completion "$cmd" "$@"
  fi
}

_fzf_complete() {
  # Split arguments around --
  local args rest str_arg i sep
  args=("$@")
  sep=
  for i in "${!args[@]}"; do
    if [[ "${args[$i]}" = -- ]]; then
      sep=$i
      break
    fi
  done
  if [[ -n "$sep" ]]; then
    str_arg=
    rest=("${args[@]:$((sep + 1)):${#args[@]}}")
    args=("${args[@]:0:$sep}")
  else
    str_arg=$1
    args=()
    shift
    rest=("$@")
  fi

  local cur selected trigger cmd post
  post="$(caller 0 | awk '{print $2}')_post"
  type -t "$post" > /dev/null 2>&1 || post=cat

  cmd="${COMP_WORDS[0]//[^A-Za-z0-9_=]/_}"
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  cur="${COMP_WORDS[COMP_CWORD]}"
  if [[ "$cur" == *"$trigger" ]]; then
    cur=${cur:0:${#cur}-${#trigger}}

    selected=$(FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_COMPLETION_OPTS $str_arg" __fzf_comprun "${rest[0]}" "${args[@]}" -q "$cur" | $post | tr '\n' ' ')
    selected=${selected% } # Strip trailing space not to repeat "-o nospace"
    if [[ -n "$selected" ]]; then
      COMPREPLY=("$selected")
    else
      COMPREPLY=("$cur")
    fi
    printf '\e[5n'
    return 0
  else
    _fzf_handle_dynamic_completion "$cmd" "${rest[@]}"
  fi
}

_fzf_path_completion() {
  __fzf_generic_path_completion _fzf_compgen_path "-m" "" "$@"
}

# Deprecated. No file only completion.
_fzf_file_completion() {
  _fzf_path_completion "$@"
}

_fzf_dir_completion() {
  __fzf_generic_path_completion _fzf_compgen_dir "" "/" "$@"
}

_fzf_complete_kill() {
  _fzf_proc_completion "$@"
}

_fzf_proc_completion() {
  _fzf_complete -m --preview 'echo {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    command ps -ef | sed 1d
  )
}

_fzf_proc_completion_post() {
  awk '{print $2}'
}

_fzf_host_completion() {
  _fzf_complete +m -- "$@" < <(
    command cat <(command tail -n +1 ~/.ssh/config ~/.ssh/config.d/* /etc/ssh/ssh_config 2> /dev/null | command grep -i '^\s*host\(name\)\? ' | awk '{for (i = 2; i <= NF; i++) print $1 " " $i}' | command grep -v '[*?]') \
        <(command grep -oE '^[[a-z0-9.,:-]+' ~/.ssh/known_hosts | tr ',' '\n' | tr -d '[' | awk '{ print $1 " " $1 }') \
        <(command grep -v '^\s*\(#\|$\)' /etc/hosts | command grep -Fv '0.0.0.0') |
        awk '{if (length($2) > 0) {print $0}}' | sort -u
  )
}

_fzf_var_completion() {
  _fzf_complete -m -- "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}

_fzf_alias_completion() {
  _fzf_complete -m -- "$@" < <(
    alias | sed 's/=.*//' | sed 's/.* //'
  )
}

# fzf options
complete -o default -F _fzf_opts_completion fzf
# fzf-tmux is a thin fzf wrapper that has only a few more options than fzf
# itself. As a quick improvement we take fzf's completion. Adding the few extra
# fzf-tmux specific options (like `-w WIDTH`) are left as a future patch.
complete -o default -F _fzf_opts_completion fzf-tmux

d_cmds="${FZF_COMPLETION_DIR_COMMANDS:-cd pushd rmdir}"
a_cmds="
  awk cat diff diff3
  emacs emacsclient ex file ftp g++ gcc gvim head hg java
  javac ld less more mvim nvim patch perl python ruby
  sed sftp sort source tail tee uniq vi view vim wc xdg-open
  basename bunzip2 bzip2 chmod chown curl cp dirname du
  find git grep gunzip gzip hg jar
  ln ls mv open rm rsync scp
  svn tar unzip zip"

# Preserve existing completion
__fzf_orig_completion < <(complete -p $d_cmds $a_cmds 2> /dev/null)

if type _completion_loader > /dev/null 2>&1; then
  _fzf_completion_loader=1
fi

__fzf_defc() {
  local cmd func opts orig_var orig def
  cmd="$1"
  func="$2"
  opts="$3"
  orig_var="_fzf_orig_completion_${cmd//[^A-Za-z0-9_]/_}"
  orig="${!orig_var}"
  if [[ -n "$orig" ]]; then
    printf -v def "$orig" "$func"
    eval "$def"
  else
    complete -F "$func" $opts "$cmd"
  fi
}

# Anything
for cmd in $a_cmds; do
  __fzf_defc "$cmd" _fzf_path_completion "-o default -o bashdefault"
done

# Directory
for cmd in $d_cmds; do
  __fzf_defc "$cmd" _fzf_dir_completion "-o nospace -o dirnames"
done

unset cmd d_cmds a_cmds

_fzf_setup_completion() {
  local kind fn cmd
  kind=$1
  fn=_fzf_${1}_completion
  if [[ $# -lt 2 ]] || ! type -t "$fn" > /dev/null; then
    echo "usage: ${FUNCNAME[0]} path|dir|var|alias|host|proc COMMANDS..."
    return 1
  fi
  shift
  __fzf_orig_completion < <(complete -p "$@" 2> /dev/null)
  for cmd in "$@"; do
    case "$kind" in
      dir)   __fzf_defc "$cmd" "$fn" "-o nospace -o dirnames" ;;
      var)   __fzf_defc "$cmd" "$fn" "-o default -o nospace -v" ;;
      alias) __fzf_defc "$cmd" "$fn" "-a" ;;
      *)     __fzf_defc "$cmd" "$fn" "-o default -o bashdefault" ;;
    esac
  done
}

# Environment variables / Aliases / Hosts / Process
_fzf_setup_completion 'var'   export unset
_fzf_setup_completion 'alias' unalias
_fzf_setup_completion 'host'  ssh telnet
_fzf_setup_completion 'proc'  kill

fi
2> /dev/null

# fzf  Key bindings
# ------------
__fzf_select__() {
  local cmd opts
  cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"}"
  opts="--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS -m"
  eval "$cmd" |
    FZF_DEFAULT_OPTS="$opts" $(__fzfcmd) "$@" |
    while read -r item; do
      printf '%q ' "$item"  # escape special chars
    done
}

if [[ $- =~ i ]]; then

__fzfcmd() {
  [[ -n "$TMUX_PANE" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "$FZF_TMUX_OPTS" ]]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  local selected="$(__fzf_select__ "$@")"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
}

__fzf_cd__() {
  local cmd opts dir
  cmd="${FZF_ALT_C_COMMAND:-"command find -L . -maxdepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | cut -b3-"}"
  opts="--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS +m"
  dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="$opts" $(__fzfcmd)) && builtin cd $dir
}

__fzf_history__() {
  local output opts script
  opts="--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS +m --read0"
  script='BEGIN { getc; $/ = "\n\t"; $HISTCOUNT = $ENV{last_hist} + 1 } s/^[ *]//; print $HISTCOUNT - $. . "\t$_" if !$seen{$_}++'
  output=$(
    builtin fc -lnr -2147483648 |
      last_hist=$(HISTTIMEFORMAT='' builtin history 1) perl -n -l0 -e "$script" |
      FZF_DEFAULT_OPTS="$opts" $(__fzfcmd) --query "$READLINE_LINE"
  ) || return
  READLINE_LINE=${output#*$'\t'}
  if [[ -z "$READLINE_POINT" ]]; then
    echo "$READLINE_LINE"
  else
    READLINE_POINT=0x7fffffff
  fi
}

# Required to refresh the prompt after fzf
bind -m emacs-standard '"\er": redraw-current-line'

bind -m vi-command '"\C-z": emacs-editing-mode'
bind -m vi-insert '"\C-z": emacs-editing-mode'
bind -m emacs-standard '"\C-z": vi-editing-mode'

if (( BASH_VERSINFO[0] < 4 )); then
  # CTRL-T - Paste the selected file path into the command line
  bind -m emacs-standard '"\C-t": " \C-b\C-k \C-u`__fzf_select__`\e\C-e\er\C-a\C-y\C-h\C-e\e \C-y\ey\C-x\C-x\C-f"'
  bind -m vi-command '"\C-t": "\C-z\C-t\C-z"'
  bind -m vi-insert '"\C-t": "\C-z\C-t\C-z"'

  # CTRL-R - Paste the selected command from history into the command line
  bind -m emacs-standard '"\C-r": "\C-e \C-u\C-y\ey\C-u"$(__fzf_history__)"\e\C-e\er"'
  bind -m vi-command '"\C-r": "\C-z\C-r\C-z"'
  bind -m vi-insert '"\C-r": "\C-z\C-r\C-z"'
else
  # CTRL-T - Paste the selected file path into the command line
  bind -m emacs-standard -x '"\C-t": fzf-file-widget'
  bind -m vi-command -x '"\C-t": fzf-file-widget'
  bind -m vi-insert -x '"\C-t": fzf-file-widget'

  # CTRL-R - Paste the selected command from history into the command line
  bind -m emacs-standard -x '"\C-r": __fzf_history__'
  bind -m vi-command -x '"\C-r": __fzf_history__'
  bind -m vi-insert -x '"\C-r": __fzf_history__'
fi

# ALT-C - cd into the selected directory
bind -m emacs-standard '"\C-y": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-h\e \ey\C-x\C-x\C-d"'
bind -m emacs-standard -x '"\C-y": __fzf_cd__'
bind -m vi-command '"\C-y": "\C-z\ec\C-z"'
bind -m vi-insert '"\C-y": "\C-z\ec\C-z"'

fi



# my search function

# find file content
function ff() {
if (( $# == 0 ))
then
        cat >&2 <<'EOF'
Usage: ff [content]

EOF
else
  rg  --files-with-matches --no-messages "$1" | fzf --preview-window=up:50% --preview "bat  --style=numbers --color=always {} | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
fi
}
function fff(){
if (( $# == 0 ))
then
        cat >&2 <<'EOF'
Usage: fff [content]

EOF
else
rg --hidden --line-number --with-filename . --field-match-separator ' '\
  | fzf -m --preview "bat --color=always {1} --highlight-line {2}" \
  --preview-window ~8,+{2}-5
fi
}
function mkdircd {
if (( $# == 0 ))
then
        cat >&2 <<'EOF'
Usage: mkdircd [dir]
EOF
else
    mkdir -p "$@" && eval cd "\"\$$#\"";
fi
}

function zle {
  if (( $# == 0 ))
then
        cat >&2 <<'EOF'
Usage: zle [file]
EOF
else
    zcat $@|le
    fi
    }


function lc {
    ls "$@"
    echo -e "\n\033[31m file number：\t $(ls "$@" | eval wc -l)\033[0m"
    }


# function lp {
#     if (( $# == 0 ))
# then
# ls --color=auto $PWD/*
# echo -e "\n\033[31m file number：\t $(ls | eval wc -l)\033[0m"

# else
#     ls --color=auto "$(readlink -f $@/*)"
#     echo -e "\n\033[31m file number：\t $(ls "$@" | eval wc -l)\033[0m"
# fi
# }

function lp {
    if (( $# == 0 ))
then
ls --color=auto $(pwd -P)/*
echo -e "\n\033[31m file number：\t $(ls | eval wc -l)\033[0m"

else
    ls --color=auto "$(readlink -f $@/*)"
    echo -e "\n\033[31m file number：\t $(ls "$@" | eval wc -l)\033[0m"
fi
}



########################## above is fzf-file-widget  #############################

export FZF_DEFAULT_COMMAND='rg --files 2> /dev/null'
export FZF_CTRL_T_COMMAND='rg --files 2> /dev/null'

# export FZF_COMPLETION_OPTS="--bind 'ctrl-a:select-all+accept'"
export FZF_CTRL_T_OPTS="--bind 'ctrl-a:select-all' --preview-window=up:50% --preview '(highlight -O ansi -l {} 2> /dev/null ||bat --style=numbers --color=always {}|| tree -C {}) 2> /dev/null|| cat | head -200'"
export FZF_DEFAULT_OPTS="--exact"
export FZF_CTRL_R_OPTS="--exact"
export FZF_ALT_C_OPTS=" --preview 'tree -C {} | head -200'"




# check if file in array exist
check_arrfile() {
# setopt localoptions noautopushd
if (( $# == 0 ))
then
        cat >&2 <<'EOF'
Usage: check_arrfile [array] ...

EOF
else
while (( $# > 0 ))
do
eval a=\${$1[*]}
                for i in ${a[*]}
                do
                        echo -e "file exist:\t $i"
                        if [[ ! -s $i ]]
                        then
                        echo "ERROR:Detect there is no $i ! Please check $1"
                        return 1
                        fi
                done
                shift
done
fi
}

# make soft link file from array to target dir
mklink_arrfile() {
if (( $# != 2 ))
then
        cat >&2 <<'EOF'
Usage: mklink_arrfile [file_array] [link_dir]
        file_link in array must be absolute path
EOF
else
        eval a=(\${$1[*]})
        if [[ "a${a}" == "a" ]]
        then
        echo "ERROR:Detect there is no content in \$$1 ! Please check $1"
        fi
        for i in ${a[*]}
        do
                echo -e "file exist:\t $i"
                if [[ ! -s $i ]]
                then
                echo "ERROR:Detect there is no $i ! Please check $1"
                return 1
                fi
        done
        mkdir -p $2
        for i in ${a[*]}
        do
        ln -s $i $2
        done
fi
}







# explain a data array
explain() {
    # setopt localoptions noautopushd
        if (( $# == 0 ))
        then
                cat >&2 <<'EOF'
Usage: explain [array ...]

EOF
else
while (( $# > 0 ))
        do
                if [[ ! -z "$1" ]]
                then
                        eval echo -e "variable: '$1' Length is \${#$1[*]}\\\n\\\t \(\${$1[*]}\)"
                        shift
                        continue
                else
                    echo -e "$1 is not a valid variable"
                fi
                shift
        done
fi
}






# calculate step cost time
unset cost_time start_time
stepon(){
    if (( $# == 0 ))
    then
        cat >&2 <<'EOF'
     Usage: Sstart [name]
EOF
else
        declare -Axg start_time
        start_time["$1"]=$(date +%s)
        echo "##################### $1 ##############################"
        echo -e "Step $1 ——START TIME :`date +"%Y-%m-%d %H:%M.%S"`"
fi
}

stepoff(){
        if (( $# == 0 ))
        then
                cat >&2 <<'EOF'
Usage: Stend [name]
EOF
else
                declare -Axg cost_time
                diff_time=$(( ( $(date +%s) - ${start_time[$1]} ) ))
                diff_h=$[diff_time/3600]
                diff_m=$[diff_time%3600/60]
                cost_time[$1]="$diff_h h $diff_m min"
        echo -e "Step $1 ——END TIME :`date +"%Y-%m-%d %H:%M.%S"` \t cost_time :${cost_time[$1]}"
        echo "##################### $1 ##############################"
fi
}


stepall(){
        echo "#######################################################"
    echo -e All Step length: ${#start_time[*]} "\t("${!start_time[*]} ")"
    for i in ${!start_time[*]}
    do
        echo -e "Step "$i"\t\tcost_time: " ${cost_time[$i]}"\tSTART: "`date -d @${start_time[$i]} +"%Y-%m-%d %H:%M.%S"`
    done
        echo "#######################################################"
}


# transpose a file    row tocol
transpose(){
        if (( $# == 0 ))
        then
                cat >&2 <<'EOF'
Usage: transpose [file]
      transpose a file from row to col(default by space).
EOF
else
  awk '{
    for (i=1;i<=NF;i++){
        if (NR==1){
            res[i]=$i
        }
        else{
            res[i]=res[i]"\t"$i
        }
    }
}END{
    for(j=1;j<=NF;j++){
        print res[j]
    }
}' $1
fi
}


# pb(){
# if (( $# == 0 ))
# then
#                 cat >&2 <<'EOF'
# Usage: pb index legth

# EOF
# else
# bar=$(seq -s "#" $(( $1*(COLUMNS - 5)/$2 ))|sed -E "s/[0-9]//g")
# blank=$(seq -s "-" $(( COLUMNS - 5 - ${#bar} ))|sed -E "s/[0-9]//g")
# echo -e "[\x1b[38;5;2m$bar\x1b[0m$blank]$(( $1*100/$2 ))%\x1b[1F"
# if (($1 == $2))
# then
# echo -e "[\x1b[38;5;2m${bar:1:$((COLUMNS/2 -8))}  \x1b[48;5;2m complete \x1b[0m  "
# fi
# sleep 0.08
# fi
# }

extract () {
  # setopt localoptions noautopushd
  if (( $# == 0 ))
  then
    cat >&2 <<'EOF'
Usage: extract [-option] [file ...]

Options:
    -r, --remove    Remove archive after unpacking.
EOF
  fi
  local remove_archive=1
  if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]
  then
    remove_archive=0
    shift
  fi
  local pwd="$PWD"
  while (( $# > 0 ))
  do
    if [[ ! -f "$1" ]]
    then
      echo "extract: '$1' is not a valid file" >&2
      shift
      continue
    fi
    local success=0
    local extract_dir="${1:t:r}"
    local file="$1" full_path="${1:A}"
    case "${file:l}" in
      (*.tar.gz|*.tgz) (( $+commands[pigz] )) && {
          pigz -dc "$file" | tar xv
        } || tar zxvf "$file" ;;
      (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$file" ;;
      (*.tar.xz|*.txz) tar --xz --help &> /dev/null && tar --xz -xvf "$file" || xzcat "$file" | tar xvf - ;;
      (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null && tar --lzma -xvf "$file" || lzcat "$file" | tar xvf - ;;
      (*.tar.zst|*.tzst) tar --zstd --help &> /dev/null && tar --zstd -xvf "$file" || zstdcat "$file" | tar xvf - ;;
      (*.tar) tar xvf "$file" ;;
      (*.tar.lz) (( $+commands[lzip] )) && tar xvf "$file" ;;
      (*.tar.lz4) lz4 -c -d "$file" | tar xvf - ;;
      (*.tar.lrz) (( $+commands[lrzuntar] )) && lrzuntar "$file" ;;
      (*.gz) (( $+commands[pigz] )) && pigz -dk "$file" || gunzip "$file" ;;
      (*.bz2) bunzip2 "$file" ;;
      (*.xz) unxz "$file" ;;
      (*.lrz) (( $+commands[lrunzip] )) && lrunzip "$file" ;;
      (*.lz4) lz4 -d "$file" ;;
      (*.lzma) unlzma "$file" ;;
      (*.z) uncompress "$file" ;;
      (*.zip|*.war|*.jar|*.ear|*.sublime-package|*.ipa|*.ipsw|*.xpi|*.apk|*.aar|*.whl) unzip "$file" -d "$extract_dir" ;;
      (*.rar) unrar x -ad "$file" ;;
      (*.rpm) command mkdir -p "$extract_dir" && builtin cd -q "$extract_dir" && rpm2cpio "$full_path" | cpio --quiet -id ;;
      (*.7z) 7za x "$file" ;;
      (*.deb) command mkdir -p "$extract_dir/control" "$extract_dir/data"
        builtin cd -q "$extract_dir"
        ar vx "$full_path" > /dev/null
        builtin cd -q control
        extract ../control.tar.*
        builtin cd -q ../data
        extract ../data.tar.*
        builtin cd -q ..
        command rm *.tar.* debian-binary ;;
      (*.zst) unzstd "$file" ;;
      (*.cab) cabextract -d "$extract_dir" "$file" ;;
      (*.cpio) cpio -idmvF "$file" ;;
      (*) echo "extract: '$file' cannot be extracted" >&2
        success=1  ;;
    esac
    (( success = success > 0 ? success : $? ))
    (( success == 0 && remove_archive == 0 )) && rm "$full_path"
    shift
    builtin cd  "$pwd"
  done
}



pbf(){
if (( $# == 0 ))
then
                cat >&2 <<'EOF'
Usage: pbf file
EOF
else
unset ar len
readarray -t ar <$1
len=${#ar[*]}
tput sc
for i in `seq 0 $(( ${len} -1 ))`;
do
tput rc
tput ed
echo -e "No:$(($i+1))/${len}\t${ar[i]}"
bar=$(seq -s "#" $(( ($i+1)*(COLUMNS - 5)/${len} ))|sed -E "s/[0-9]//g")
blank=$(seq -s "-" $(( COLUMNS - 5 - ${#bar} ))|sed -E "s/[0-9]//g")
if (($i != $(( ${len} -1 ))))
then
echo -e "[\x1b[38;5;2m$bar\x1b[0m$blank]$(( ($i+1)*100/$(( ${len} )) ))%"
tput ed
else
echo -e "[\x1b[38;5;2m$bar\x1b[0m$blank]$(( ($i+1)*100/$(( ${len} )) ))%\x1b[1F"
echo -e "[\x1b[38;5;2m${bar:1:$((COLUMNS/2 -8))}  \x1b[48;5;2m complete \x1b[0m  "
fi
eval ${ar[i]}
if [ $? != 0 ]; then
   echo -e "\x1b[48;5;9mERROR:\x1b[0m \x1b[38;5;9m${ar[i]} failed\x1b[0m"
   break
fi
sleep 0.5
done
fi

}



pb(){
if (( $# == 0 ))
then
                cat >&2 <<'EOF'
Usage: pb command array|files [args ...]
example: pb cat test2/\* \|grep 'sd'
        pb mv test2/\* .
a=$i
b=$2
EOF
else
unset ar1 ar2 len
ar1=$1
eval ar2=($2)
shift
shift
len=${#ar2[*]}
tput sc
for i in `seq 0 $(( ${#ar2[*]} -1 ))`;
do
tput rc
tput ed
script="$ar1 ${ar2[i]} $@"
echo -e "No$(($i+1))/${len}:\t\t$script "
bar=$(seq -s "#" $(( ($i+1)*(COLUMNS - 5)/${#ar2[*]} ))|sed -E "s/[0-9]//g")
blank=$(seq -s "-" $(( COLUMNS - 5 - ${#bar} ))|sed -E "s/[0-9]//g")
echo -e "[\x1b[38;5;2m$bar\x1b[0m$blank]$(( ($i+1)*100/$(( ${#ar2[*]} )) ))%"
tput ed
if (($i == $(( ${#ar2[*]} -1 ))))
then
echo -e "\x1b[1F[\x1b[38;5;2m${bar:1:$((COLUMNS/2 -8))}  \x1b[48;5;2m complete \x1b[0m  "
fi
eval $script
if [ $? != 0 ]; then
   echo -e "\x1b[48;5;9mERROR:\x1b[0m \x1b[38;5;9m$script failed\x1b[0m"
   break
fi
sleep 0.5
done
fi
}
